version: '3.1'

services:
  db:
    image: postgres:14.2
    restart: "no"
    env_file:
      - .env
    volumes:
      - ../db/init.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${PGDATABASE}", "-U", "${PGUSER}" ]
      timeout: 45s
      interval: 10s
      retries: 10

  mq:
    hostname: "mq"
    image: rabbitmq:3.9-management
    restart: "no"
    env_file:
      - .env
    volumes:
      - ../config/rabbitmq:/etc/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity || exit 1
      interval: 30s
      start_period: 30s

  restapi:
    image: broker/python-base
    restart: "no"
    env_file:
      - .env
    depends_on:
      - "db"
    volumes:
      - ../src/python:/home/broker/python
    working_dir: "/home/broker/python/restapi"
    entrypoint: [ "/home/broker/.local/bin/uvicorn", "--proxy-headers", "--host", "0.0.0.0", "--port", "5687", "RestAPI:app" ]
    healthcheck:
      test: curl --fail -I http://localhost:5687/openapi.json || exit 1
      interval: 1m
      start_period: 20s
    ports:
      - "5687:5687"  # Expose the main API port
      - "8000:8000"  # Expose the metrics port

  website:
    image: broker/mgmt-app
    env_file:
      - .env
    depends_on:
      restapi:
        condition: "service_healthy"
    volumes:
      - ../src/www:/app

  ttn_webhook:
    image: broker/python-base
    restart: "no"
    env_file:
      - .env
    depends_on:
      mq:
        condition: "service_healthy"
    volumes:
      - ../src/python:/home/broker/python
    working_dir: "/home/broker/python/ttn"
    entrypoint: [ "/home/broker/.local/bin/uvicorn", "--proxy-headers", "--host", "0.0.0.0", "--port", "5688", "WebHook:app" ]
    ports:
      - "8001:8001" # Expose the metrics port

  ttn_processor:
    image: broker/python-base
    restart: "no"
    env_file:
      - .env
    depends_on:
      db:
        condition: "service_healthy"
      mq:
        condition: "service_healthy"
      ttn_decoder:
        condition: "service_started"
    volumes:
      - ../src/python:/home/broker/python
    working_dir: "/home/broker/python/ttn"
    entrypoint: [ "python", "AllMsgsWriter.py" ]
    ports:
      - "8002:8002" # Expose the metrics port

  ttn_decoder:
    image: broker/ttn_decoder
    restart: "no"
    env_file:
      - .env
    volumes:
      - ../src/js/ttn_decoder/src:/usr/src/ttn_decoder/src
      - ../../ttn-formatters/:/usr/src/ttn_formatters
    working_dir: "/usr/src/ttn_decoder"
    entrypoint: [ "node", "src" ]

  ydoc:
    image: broker/python-base
    restart: "no"
    env_file:
      - .env
    depends_on:
      db:
        condition: "service_healthy"
      mq:
        condition: "service_healthy"
    volumes:
      - ../src/python:/home/broker/python
    working_dir: "/home/broker/python"
    entrypoint: [ "python", "-m", "ydoc.YDOC" ]
    ports:
      - "8003:8003" # Expose the metrics port

  wombat:
    image: broker/python-base
    restart: "no"
    env_file:
      - .env
    depends_on:
      db:
        condition: "service_healthy"
      mq:
        condition: "service_healthy"
    volumes:
      - ../src/python:/home/broker/python
    working_dir: "/home/broker/python"
    entrypoint: [ "python", "-m", "ydoc.Wombat" ]
    ports:
      - "8004:8004" # Expose the metrics port

  lm:
    image: broker/python-base
    restart: "no"
    env_file:
      - .env
    depends_on:
      db:
        condition: "service_healthy"
      mq:
        condition: "service_healthy"
    volumes:
      - ../src/python:/home/broker/python
    working_dir: "/home/broker/python"
    entrypoint: [ "python", "-m", "logical_mapper.LogicalMapper" ]
    ports:
      - "8005:8005" # Expose the metrics port

  delivery:
    image: broker/python-base:latest
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: "service_healthy"
      mq:
        condition: "service_healthy"
    volumes:
      - ../src/python:/home/broker/python
    working_dir: "/home/broker/python"
    entrypoint: [ "python", "-m", "delivery.UbidotsWriter" ]
    ports:
      - "8006:8006" # Expose the metrics port

  frred:
    image: broker/python-base
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      db:
        condition: "service_healthy"
      mq:
        condition: "service_healthy"
    volumes:
      - ../src/python:/home/broker/python
      - ${DATABOLT_SHARED_DIR}/raw_data:/raw_data
    working_dir: "/home/broker/python"
    entrypoint: [ "python", "-m", "delivery.FRRED" ]
    ports:
      - "8007:8007" # Expose the metrics port

  x:
    image: broker/python-base
    restart: "no"
    env_file:
      - .env
    environment:
      - PYTHONPATH=/home/broker/broker/src/python:/home/broker/broker/test/python
    depends_on:
      db:
        condition: "service_healthy"
      mq:
        condition: "service_healthy"
    volumes:
      - ..:/home/broker/broker
    working_dir: "/home/broker/broker"
    entrypoint: [ "./forever.sh" ]

  prometheus:
    image: prom/prometheus
    volumes:
      - ../config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: password
    depends_on:
      - prometheus

  nginx:
    image: nginx
    volumes:
      - ../config/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - grafana

volumes:
  grafana-storage:
